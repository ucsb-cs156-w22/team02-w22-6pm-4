"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mixinJestEnvironment = void 0;
const messaging_1 = require("../messaging");
function fullNameDescribeBlock(describe) {
    if (describe.parent) {
        const parentName = fullNameDescribeBlock(describe.parent);
        return `${parentName}${parentName.length > 0 ? ' ' : ''}${describe.name}`;
    }
    else {
        return ''; // describe.name === "ROOT_DESCRIBE_BLOCK"
    }
}
function fullName(test) {
    return `${fullNameDescribeBlock(test.parent)} ${test.name}`;
}
function mixinJestEnvironment(JestEnvironmentClass) {
    // @ts-expect-error wrong assumption about a mixin class: https://github.com/microsoft/TypeScript/issues/37142
    class StrykerJestEnvironment extends JestEnvironmentClass {
        constructor(config, context) {
            super(config, context);
            this.fileName = context.testPath;
        }
        async handleTestEvent(event, eventState) {
            var _a, _b;
            await ((_a = super.handleTestEvent) === null || _a === void 0 ? void 0 : _a.call(this, event, eventState));
            if (messaging_1.state.coverageAnalysis === 'perTest' && event.name === 'test_start') {
                const ns = (this.global[this.global.__strykerGlobalNamespace__] = (_b = this.global[this.global.__strykerGlobalNamespace__]) !== null && _b !== void 0 ? _b : {});
                ns.currentTestId = fullName(event.test);
            }
        }
        async teardown() {
            var _a;
            const mutantCoverage = (_a = this.global[this.global.__strykerGlobalNamespace__]) === null || _a === void 0 ? void 0 : _a.mutantCoverage;
            messaging_1.state.handleMutantCoverage(this.fileName, mutantCoverage);
            await super.teardown();
        }
    }
    return StrykerJestEnvironment;
}
exports.mixinJestEnvironment = mixinJestEnvironment;
//# sourceMappingURL=mixin-jest-environment.js.map