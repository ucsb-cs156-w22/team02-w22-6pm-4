"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactScriptsTSJestConfigLoader = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const plugin_1 = require("@stryker-mutator/api/plugin");
const utils_1 = require("../utils");
const pluginTokens = tslib_1.__importStar(require("../plugin-tokens"));
class ReactScriptsTSJestConfigLoader {
    constructor(log, resolve, projectRoot) {
        this.log = log;
        this.resolve = resolve;
        this.projectRoot = projectRoot;
    }
    loadConfig() {
        try {
            // Get the location of react-ts script, this is later used to generate the Jest configuration used for React projects.
            const reactScriptsTsLocation = path_1.default.join(this.resolve('react-scripts-ts/package.json'), '..');
            // Create the React configuration for Jest
            const jestConfiguration = this.createJestConfig(reactScriptsTsLocation);
            jestConfiguration.testEnvironment = 'jsdom';
            this.log.warn('DEPRECATED: The support for create-react-app-ts projects is deprecated and will be removed in the future. Please migrate your project to create-react-app and update your Stryker config setting to "create-react-app" (see https://create-react-app.dev/docs/adding-typescript/)');
            return jestConfiguration;
        }
        catch (e) {
            if (this.isNodeErrnoException(e) && e.code === 'MODULE_NOT_FOUND') {
                throw Error('Unable to locate package react-scripts-ts. ' + 'This package is required when projectType is set to "create-react-app-ts".');
            }
            throw e;
        }
    }
    isNodeErrnoException(arg) {
        return arg.code !== undefined;
    }
    createJestConfig(reactScriptsTsLocation) {
        return utils_1.createReactTsJestConfig((relativePath) => path_1.default.join(reactScriptsTsLocation, relativePath), this.projectRoot, false);
    }
}
exports.ReactScriptsTSJestConfigLoader = ReactScriptsTSJestConfigLoader;
ReactScriptsTSJestConfigLoader.inject = plugin_1.tokens(plugin_1.commonTokens.logger, pluginTokens.resolve, pluginTokens.projectRoot);
//# sourceMappingURL=react-scripts-ts-jest-config-loader.js.map