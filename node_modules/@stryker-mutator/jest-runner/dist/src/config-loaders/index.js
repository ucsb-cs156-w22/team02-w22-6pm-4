"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configLoaderFactory = void 0;
const tslib_1 = require("tslib");
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
const pluginTokens = tslib_1.__importStar(require("../plugin-tokens"));
const custom_jest_config_loader_1 = require("./custom-jest-config-loader");
const react_scripts_jest_config_loader_1 = require("./react-scripts-jest-config-loader");
const react_scripts_ts_jest_config_loader_1 = require("./react-scripts-ts-jest-config-loader");
configLoaderFactory.inject = plugin_1.tokens(plugin_1.commonTokens.options, plugin_1.commonTokens.injector, plugin_1.commonTokens.logger);
function configLoaderFactory(options, injector, log) {
    const warnAboutConfigFile = (projectType, configFile) => {
        if (configFile) {
            log.warn(`Config setting "configFile" is not supported for projectType "${projectType}"`);
        }
    };
    const optionsWithJest = options;
    const configLoaderInjector = injector
        .provideValue(pluginTokens.loader, util_1.requireResolve)
        .provideValue(pluginTokens.resolve, require.resolve)
        .provideValue(pluginTokens.projectRoot, process.cwd());
    switch (optionsWithJest.jest.projectType) {
        case 'custom':
            return configLoaderInjector.injectClass(custom_jest_config_loader_1.CustomJestConfigLoader);
        case 'create-react-app':
            warnAboutConfigFile(optionsWithJest.jest.projectType, optionsWithJest.jest.configFile);
            return configLoaderInjector.injectClass(react_scripts_jest_config_loader_1.ReactScriptsJestConfigLoader);
        case 'create-react-app-ts':
            warnAboutConfigFile(optionsWithJest.jest.projectType, optionsWithJest.jest.configFile);
            return configLoaderInjector.injectClass(react_scripts_ts_jest_config_loader_1.ReactScriptsTSJestConfigLoader);
        default:
            throw new Error(`No configLoader available for ${optionsWithJest.jest.projectType}`);
    }
}
exports.configLoaderFactory = configLoaderFactory;
//# sourceMappingURL=index.js.map