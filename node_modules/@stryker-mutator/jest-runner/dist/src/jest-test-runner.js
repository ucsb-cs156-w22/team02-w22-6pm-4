"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JestTestRunner = exports.jestTestRunnerFactory = exports.createJestTestRunnerFactory = void 0;
const tslib_1 = require("tslib");
// monkey patch exit first!!
require("./utils/monkey-patch-exit");
const core_1 = require("@stryker-mutator/api/core");
const plugin_1 = require("@stryker-mutator/api/plugin");
const test_runner_1 = require("@stryker-mutator/api/test-runner");
const util_1 = require("@stryker-mutator/util");
const jest_test_adapters_1 = require("./jest-test-adapters");
const jest_plugins_1 = require("./jest-plugins");
const pluginTokens = tslib_1.__importStar(require("./plugin-tokens"));
const config_loaders_1 = require("./config-loaders");
const jest_override_options_1 = require("./jest-override-options");
const utils_1 = require("./utils");
const messaging_1 = require("./messaging");
function createJestTestRunnerFactory(namespace = core_1.INSTRUMENTER_CONSTANTS.NAMESPACE) {
    jestTestRunnerFactory.inject = plugin_1.tokens(plugin_1.commonTokens.injector);
    function jestTestRunnerFactory(injector) {
        return (injector
            .provideValue(pluginTokens.processEnv, process.env)
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            .provideValue(pluginTokens.jestVersion, require('jest/package.json').version)
            .provideFactory(pluginTokens.jestTestAdapter, jest_test_adapters_1.jestTestAdapterFactory)
            .provideFactory(pluginTokens.configLoader, config_loaders_1.configLoaderFactory)
            .provideValue(pluginTokens.globalNamespace, namespace)
            .injectClass(JestTestRunner));
    }
    return jestTestRunnerFactory;
}
exports.createJestTestRunnerFactory = createJestTestRunnerFactory;
exports.jestTestRunnerFactory = createJestTestRunnerFactory();
class JestTestRunner {
    constructor(log, options, processEnvRef, jestTestAdapter, configLoader, globalNamespace) {
        this.log = log;
        this.processEnvRef = processEnvRef;
        this.jestTestAdapter = jestTestAdapter;
        this.globalNamespace = globalNamespace;
        const jestOptions = options;
        // Get jest configuration from stryker options and assign it to jestConfig
        const configFromFile = configLoader.loadConfig();
        this.jestConfig = this.mergeConfigSettings(configFromFile, jestOptions.jest || {});
        // Get enableFindRelatedTests from stryker jest options or default to true
        this.enableFindRelatedTests = jestOptions.jest.enableFindRelatedTests;
        if (this.enableFindRelatedTests) {
            this.log.debug('Running jest with --findRelatedTests flag. Set jest.enableFindRelatedTests to false to run all tests on every mutant.');
        }
        else {
            this.log.debug('Running jest without --findRelatedTests flag. Set jest.enableFindRelatedTests to true to run only relevant tests on every mutant.');
        }
    }
    async dryRun({ coverageAnalysis }) {
        messaging_1.state.coverageAnalysis = coverageAnalysis;
        const mutantCoverage = { perTest: {}, static: {} };
        const fileNamesWithMutantCoverage = [];
        if (coverageAnalysis !== 'off') {
            messaging_1.state.setMutantCoverageHandler((fileName, report) => {
                utils_1.mergeMutantCoverage(mutantCoverage, report);
                fileNamesWithMutantCoverage.push(fileName);
            });
        }
        try {
            const { dryRunResult, jestResult } = await this.run({
                jestConfig: jest_plugins_1.withCoverageAnalysis(this.jestConfig, coverageAnalysis),
                projectRoot: process.cwd(),
            });
            if (dryRunResult.status === test_runner_1.DryRunStatus.Complete && coverageAnalysis !== 'off') {
                const errorMessage = utils_1.verifyAllTestFilesHaveCoverage(jestResult, fileNamesWithMutantCoverage);
                if (errorMessage) {
                    return {
                        status: test_runner_1.DryRunStatus.Error,
                        errorMessage,
                    };
                }
                else {
                    dryRunResult.mutantCoverage = mutantCoverage;
                }
            }
            return dryRunResult;
        }
        finally {
            messaging_1.state.resetMutantCoverageHandler();
        }
    }
    async mutantRun({ activeMutant, sandboxFileName, testFilter }) {
        const fileNameUnderTest = this.enableFindRelatedTests ? sandboxFileName : undefined;
        messaging_1.state.coverageAnalysis = 'off';
        let testNamePattern;
        if (testFilter) {
            testNamePattern = testFilter.map((testId) => `(${util_1.escapeRegExp(testId)})`).join('|');
        }
        process.env[core_1.INSTRUMENTER_CONSTANTS.ACTIVE_MUTANT_ENV_VARIABLE] = activeMutant.id.toString();
        try {
            const { dryRunResult } = await this.run({ fileNameUnderTest, jestConfig: this.jestConfig, projectRoot: process.cwd(), testNamePattern });
            return test_runner_1.toMutantRunResult(dryRunResult);
        }
        finally {
            delete process.env[core_1.INSTRUMENTER_CONSTANTS.ACTIVE_MUTANT_ENV_VARIABLE];
        }
    }
    async run(settings) {
        this.setEnv();
        if (this.log.isTraceEnabled()) {
            this.log.trace('Invoking Jest with config %s', JSON.stringify(settings));
        }
        const { results } = await this.jestTestAdapter.run(settings);
        return { dryRunResult: this.collectRunResult(results), jestResult: results };
    }
    collectRunResult(results) {
        if (results.numRuntimeErrorTestSuites) {
            const errorMessage = results.testResults
                .map((testSuite) => this.collectSerializableErrorText(testSuite.testExecError))
                .filter(util_1.notEmpty)
                .join(', ');
            return {
                status: test_runner_1.DryRunStatus.Error,
                errorMessage,
            };
        }
        else {
            return {
                status: test_runner_1.DryRunStatus.Complete,
                tests: this.processTestResults(results.testResults),
            };
        }
    }
    collectSerializableErrorText(error) {
        return error && `${error.code && `${error.code} `}${error.message} ${error.stack}`;
    }
    setEnv() {
        // Jest CLI will set process.env.NODE_ENV to 'test' when it's null, do the same here
        // https://github.com/facebook/jest/blob/master/packages/jest-cli/bin/jest.js#L12-L14
        if (!this.processEnvRef.NODE_ENV) {
            this.processEnvRef.NODE_ENV = 'test';
        }
        // Force colors off: https://github.com/chalk/supports-color#info
        process.env.FORCE_COLOR = '0';
    }
    processTestResults(suiteResults) {
        var _a;
        const testResults = [];
        for (const suiteResult of suiteResults) {
            for (const testResult of suiteResult.testResults) {
                let result;
                const timeSpentMs = (_a = testResult.duration) !== null && _a !== void 0 ? _a : 0;
                switch (testResult.status) {
                    case 'passed':
                        result = {
                            id: testResult.fullName,
                            name: testResult.fullName,
                            status: test_runner_1.TestStatus.Success,
                            timeSpentMs,
                        };
                        break;
                    case 'failed':
                        result = {
                            id: testResult.fullName,
                            name: testResult.fullName,
                            failureMessage: testResult.failureMessages.join(', '),
                            status: test_runner_1.TestStatus.Failed,
                            timeSpentMs,
                        };
                        break;
                    default:
                        result = {
                            id: testResult.fullName,
                            name: testResult.fullName,
                            status: test_runner_1.TestStatus.Skipped,
                            timeSpentMs,
                        };
                        break;
                }
                testResults.push(result);
            }
        }
        return testResults;
    }
    mergeConfigSettings(configFromFile, options) {
        var _a;
        const config = ((_a = options.config) !== null && _a !== void 0 ? _a : {});
        config.bail = options.enableBail;
        const stringify = (obj) => JSON.stringify(obj, null, 2);
        this.log.debug(`Merging file-based config ${stringify(configFromFile)} 
      with custom config ${stringify(config)}
      and default (internal) stryker config ${stringify(jest_override_options_1.JEST_OVERRIDE_OPTIONS)}`);
        const mergedConfig = Object.assign(Object.assign(Object.assign({}, configFromFile), config), jest_override_options_1.JEST_OVERRIDE_OPTIONS);
        mergedConfig.globals = Object.assign(Object.assign({}, mergedConfig.globals), { __strykerGlobalNamespace__: this.globalNamespace });
        return mergedConfig;
    }
}
exports.JestTestRunner = JestTestRunner;
JestTestRunner.inject = plugin_1.tokens(plugin_1.commonTokens.logger, plugin_1.commonTokens.options, pluginTokens.processEnv, pluginTokens.jestTestAdapter, pluginTokens.configLoader, pluginTokens.globalNamespace);
//# sourceMappingURL=jest-test-runner.js.map