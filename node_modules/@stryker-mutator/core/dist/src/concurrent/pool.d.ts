import { Observable } from 'rxjs';
import { Disposable } from 'typed-inject';
import { TestRunner } from '@stryker-mutator/api/test-runner';
import { Checker } from '@stryker-mutator/api/check';
export interface Worker {
    init?(): Promise<unknown>;
    dispose?(): Promise<unknown>;
}
export declare function createTestRunnerPool(factory: () => TestRunner, concurrencyToken$: Observable<number>): Pool<TestRunner>;
export declare namespace createTestRunnerPool {
    var inject: ["testRunnerFactory", "testRunnerConcurrencyTokens"];
}
export declare function createCheckerPool(factory: () => Checker, concurrencyToken$: Observable<number>): Pool<Checker>;
export declare namespace createCheckerPool {
    var inject: ["checkerFactory", "checkerConcurrencyTokens"];
}
/**
 * Represents a pool of workers. Use `schedule` to schedule work to be executed on the workers.
 * The pool will automatically recycle the workers, but will make sure only one task is executed
 * on one worker at any one time. Creates as many workers as the concurrency tokens allow.
 * Also takes care of the initialing of the workers (with `init()`)
 */
export declare class Pool<TWorker extends Worker> implements Disposable {
    private readonly createdWorkers;
    private readonly worker$;
    constructor(factory: () => TWorker, concurrencyToken$: Observable<number>);
    /**
     * Returns a promise that resolves if all concurrency tokens have resulted in initialized workers.
     * This is optional, workers will get initialized either way.
     */
    init(): Promise<void>;
    /**
     * Schedules a task to be executed on workers in the pool. Each input is paired with a worker, which allows async work to be done.
     * @param input$ The inputs to pair up with a worker.
     * @param task The task to execute on each worker
     */
    schedule<TIn, TOut>(input$: Observable<TIn>, task: (worker: TWorker, input: TIn) => Promise<TOut> | TOut): Observable<TOut>;
    private isDisposed;
    /**
     * Dispose the pool
     */
    dispose(): Promise<void>;
}
//# sourceMappingURL=pool.d.ts.map