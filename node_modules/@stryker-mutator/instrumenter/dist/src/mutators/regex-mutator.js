"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegexMutator = void 0;
const tslib_1 = require("tslib");
const types = tslib_1.__importStar(require("@babel/types"));
const weaponRegex = tslib_1.__importStar(require("weapon-regex"));
/**
 * Checks that a string literal is an obvious regex string literal
 * @param path The string literal to checks
 * @example
 * new RegExp("\\d{4}");
 */
function isObviousRegexString(path) {
    return (path.parentPath.isNewExpression() &&
        types.isIdentifier(path.parentPath.node.callee) &&
        path.parentPath.node.callee.name === RegExp.name &&
        path.parentPath.node.arguments[0] === path.node);
}
const weaponRegexOptions = { mutationLevels: [1] };
class RegexMutator {
    constructor(weaponRegexMutateImpl = weaponRegex.mutate) {
        this.weaponRegexMutateImpl = weaponRegexMutateImpl;
        this.name = 'Regex';
    }
    mutate(path) {
        if (path.isRegExpLiteral()) {
            return this.mutatePattern(path.node.pattern).map((replacementPattern) => {
                const replacement = types.cloneNode(path.node, false);
                replacement.pattern = replacementPattern;
                return {
                    original: path.node,
                    replacement,
                };
            });
        }
        else if (path.isStringLiteral() && isObviousRegexString(path)) {
            return this.mutatePattern(path.node.value).map((replacementPattern) => {
                const replacement = types.cloneNode(path.node, false);
                replacement.value = replacementPattern;
                return {
                    original: path.node,
                    replacement,
                };
            });
        }
        return [];
    }
    mutatePattern(pattern) {
        if (pattern.length) {
            try {
                return this.weaponRegexMutateImpl(pattern, weaponRegexOptions).map((mutant) => mutant.pattern);
            }
            catch (err) {
                console.error(`[RegexMutator]: The Regex parser of weapon-regex couldn't parse this regex pattern: "${pattern}". Please report this issue at https://github.com/stryker-mutator/weapon-regex/issues. Inner error: ${err.message}`);
            }
        }
        return [];
    }
}
exports.RegexMutator = RegexMutator;
//# sourceMappingURL=regex-mutator.js.map